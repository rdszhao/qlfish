Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> query
Rule 1     query -> select_query
Rule 2     query -> find_query
Rule 3     select_query -> SELECT fields optional_sorting WHERE conditions FROM IDENTIFIER
Rule 4     select_query -> SELECT fields optional_sorting WHERE conditions FROM join_expression
Rule 5     find_query -> FIND agg_func optional_sorting BY IDENTIFIER FROM IDENTIFIER
Rule 6     find_query -> FIND agg_func optional_sorting BY IDENTIFIER FROM join_expression
Rule 7     agg_func -> AVG
Rule 8     agg_func -> COUNT
Rule 9     agg_func -> AVG LPAREN IDENTIFIER RPAREN
Rule 10    agg_func -> COUNT LPAREN IDENTIFIER RPAREN
Rule 11    fields -> field
Rule 12    fields -> field COMMA fields
Rule 13    field -> IDENTIFIER
Rule 14    field -> STAR
Rule 15    optional_sorting -> LBRACKET sort_order RBRACKET
Rule 16    optional_sorting -> <empty>
Rule 17    sort_order -> ASC
Rule 18    sort_order -> DESC
Rule 19    conditions -> condition
Rule 20    conditions -> condition COMMA conditions
Rule 21    condition -> IDENTIFIER EQUALS STRING
Rule 22    condition -> IDENTIFIER EQUALS IDENTIFIER
Rule 23    tables -> IDENTIFIER
Rule 24    tables -> IDENTIFIER COMMA tables
Rule 25    join_expression -> JOIN tables ON join_conditions
Rule 26    join_condition -> IDENTIFIER COLON IDENTIFIER
Rule 27    join_conditions -> join_condition
Rule 28    join_conditions -> join_condition COMMA join_conditions

Terminals, with rules where they appear

ASC                  : 17
AVG                  : 7 9
BY                   : 5 6
COLON                : 26
COMMA                : 12 20 24 28
COUNT                : 8 10
DESC                 : 18
EQUALS               : 21 22
FIND                 : 5 6
FROM                 : 3 4 5 6
IDENTIFIER           : 3 5 5 6 9 10 13 21 22 22 23 24 26 26
JOIN                 : 25
LBRACKET             : 15
LPAREN               : 9 10
ON                   : 25
RBRACKET             : 15
RPAREN               : 9 10
SELECT               : 3 4
STAR                 : 14
STRING               : 21
WHERE                : 3 4
error                : 

Nonterminals, with rules where they appear

agg_func             : 5 6
condition            : 19 20
conditions           : 3 4 20
field                : 11 12
fields               : 3 4 12
find_query           : 2
join_condition       : 27 28
join_conditions      : 25 28
join_expression      : 4 6
optional_sorting     : 3 4 5 6
query                : 0
select_query         : 1
sort_order           : 15
tables               : 24 25

Parsing method: LALR

state 0

    (0) S' -> . query
    (1) query -> . select_query
    (2) query -> . find_query
    (3) select_query -> . SELECT fields optional_sorting WHERE conditions FROM IDENTIFIER
    (4) select_query -> . SELECT fields optional_sorting WHERE conditions FROM join_expression
    (5) find_query -> . FIND agg_func optional_sorting BY IDENTIFIER FROM IDENTIFIER
    (6) find_query -> . FIND agg_func optional_sorting BY IDENTIFIER FROM join_expression

    SELECT          shift and go to state 4
    FIND            shift and go to state 5

    query                          shift and go to state 1
    select_query                   shift and go to state 2
    find_query                     shift and go to state 3

state 1

    (0) S' -> query .



state 2

    (1) query -> select_query .

    $end            reduce using rule 1 (query -> select_query .)


state 3

    (2) query -> find_query .

    $end            reduce using rule 2 (query -> find_query .)


state 4

    (3) select_query -> SELECT . fields optional_sorting WHERE conditions FROM IDENTIFIER
    (4) select_query -> SELECT . fields optional_sorting WHERE conditions FROM join_expression
    (11) fields -> . field
    (12) fields -> . field COMMA fields
    (13) field -> . IDENTIFIER
    (14) field -> . STAR

    IDENTIFIER      shift and go to state 7
    STAR            shift and go to state 9

    fields                         shift and go to state 6
    field                          shift and go to state 8

state 5

    (5) find_query -> FIND . agg_func optional_sorting BY IDENTIFIER FROM IDENTIFIER
    (6) find_query -> FIND . agg_func optional_sorting BY IDENTIFIER FROM join_expression
    (7) agg_func -> . AVG
    (8) agg_func -> . COUNT
    (9) agg_func -> . AVG LPAREN IDENTIFIER RPAREN
    (10) agg_func -> . COUNT LPAREN IDENTIFIER RPAREN

    AVG             shift and go to state 11
    COUNT           shift and go to state 12

    agg_func                       shift and go to state 10

state 6

    (3) select_query -> SELECT fields . optional_sorting WHERE conditions FROM IDENTIFIER
    (4) select_query -> SELECT fields . optional_sorting WHERE conditions FROM join_expression
    (15) optional_sorting -> . LBRACKET sort_order RBRACKET
    (16) optional_sorting -> .

    LBRACKET        shift and go to state 14
    WHERE           reduce using rule 16 (optional_sorting -> .)

    optional_sorting               shift and go to state 13

state 7

    (13) field -> IDENTIFIER .

    COMMA           reduce using rule 13 (field -> IDENTIFIER .)
    LBRACKET        reduce using rule 13 (field -> IDENTIFIER .)
    WHERE           reduce using rule 13 (field -> IDENTIFIER .)


state 8

    (11) fields -> field .
    (12) fields -> field . COMMA fields

    LBRACKET        reduce using rule 11 (fields -> field .)
    WHERE           reduce using rule 11 (fields -> field .)
    COMMA           shift and go to state 15


state 9

    (14) field -> STAR .

    COMMA           reduce using rule 14 (field -> STAR .)
    LBRACKET        reduce using rule 14 (field -> STAR .)
    WHERE           reduce using rule 14 (field -> STAR .)


state 10

    (5) find_query -> FIND agg_func . optional_sorting BY IDENTIFIER FROM IDENTIFIER
    (6) find_query -> FIND agg_func . optional_sorting BY IDENTIFIER FROM join_expression
    (15) optional_sorting -> . LBRACKET sort_order RBRACKET
    (16) optional_sorting -> .

    LBRACKET        shift and go to state 14
    BY              reduce using rule 16 (optional_sorting -> .)

    optional_sorting               shift and go to state 16

state 11

    (7) agg_func -> AVG .
    (9) agg_func -> AVG . LPAREN IDENTIFIER RPAREN

    LBRACKET        reduce using rule 7 (agg_func -> AVG .)
    BY              reduce using rule 7 (agg_func -> AVG .)
    LPAREN          shift and go to state 17


state 12

    (8) agg_func -> COUNT .
    (10) agg_func -> COUNT . LPAREN IDENTIFIER RPAREN

    LBRACKET        reduce using rule 8 (agg_func -> COUNT .)
    BY              reduce using rule 8 (agg_func -> COUNT .)
    LPAREN          shift and go to state 18


state 13

    (3) select_query -> SELECT fields optional_sorting . WHERE conditions FROM IDENTIFIER
    (4) select_query -> SELECT fields optional_sorting . WHERE conditions FROM join_expression

    WHERE           shift and go to state 19


state 14

    (15) optional_sorting -> LBRACKET . sort_order RBRACKET
    (17) sort_order -> . ASC
    (18) sort_order -> . DESC

    ASC             shift and go to state 21
    DESC            shift and go to state 22

    sort_order                     shift and go to state 20

state 15

    (12) fields -> field COMMA . fields
    (11) fields -> . field
    (12) fields -> . field COMMA fields
    (13) field -> . IDENTIFIER
    (14) field -> . STAR

    IDENTIFIER      shift and go to state 7
    STAR            shift and go to state 9

    field                          shift and go to state 8
    fields                         shift and go to state 23

state 16

    (5) find_query -> FIND agg_func optional_sorting . BY IDENTIFIER FROM IDENTIFIER
    (6) find_query -> FIND agg_func optional_sorting . BY IDENTIFIER FROM join_expression

    BY              shift and go to state 24


state 17

    (9) agg_func -> AVG LPAREN . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 25


state 18

    (10) agg_func -> COUNT LPAREN . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 26


state 19

    (3) select_query -> SELECT fields optional_sorting WHERE . conditions FROM IDENTIFIER
    (4) select_query -> SELECT fields optional_sorting WHERE . conditions FROM join_expression
    (19) conditions -> . condition
    (20) conditions -> . condition COMMA conditions
    (21) condition -> . IDENTIFIER EQUALS STRING
    (22) condition -> . IDENTIFIER EQUALS IDENTIFIER

    IDENTIFIER      shift and go to state 28

    conditions                     shift and go to state 27
    condition                      shift and go to state 29

state 20

    (15) optional_sorting -> LBRACKET sort_order . RBRACKET

    RBRACKET        shift and go to state 30


state 21

    (17) sort_order -> ASC .

    RBRACKET        reduce using rule 17 (sort_order -> ASC .)


state 22

    (18) sort_order -> DESC .

    RBRACKET        reduce using rule 18 (sort_order -> DESC .)


state 23

    (12) fields -> field COMMA fields .

    LBRACKET        reduce using rule 12 (fields -> field COMMA fields .)
    WHERE           reduce using rule 12 (fields -> field COMMA fields .)


state 24

    (5) find_query -> FIND agg_func optional_sorting BY . IDENTIFIER FROM IDENTIFIER
    (6) find_query -> FIND agg_func optional_sorting BY . IDENTIFIER FROM join_expression

    IDENTIFIER      shift and go to state 31


state 25

    (9) agg_func -> AVG LPAREN IDENTIFIER . RPAREN

    RPAREN          shift and go to state 32


state 26

    (10) agg_func -> COUNT LPAREN IDENTIFIER . RPAREN

    RPAREN          shift and go to state 33


state 27

    (3) select_query -> SELECT fields optional_sorting WHERE conditions . FROM IDENTIFIER
    (4) select_query -> SELECT fields optional_sorting WHERE conditions . FROM join_expression

    FROM            shift and go to state 34


state 28

    (21) condition -> IDENTIFIER . EQUALS STRING
    (22) condition -> IDENTIFIER . EQUALS IDENTIFIER

    EQUALS          shift and go to state 35


state 29

    (19) conditions -> condition .
    (20) conditions -> condition . COMMA conditions

    FROM            reduce using rule 19 (conditions -> condition .)
    COMMA           shift and go to state 36


state 30

    (15) optional_sorting -> LBRACKET sort_order RBRACKET .

    WHERE           reduce using rule 15 (optional_sorting -> LBRACKET sort_order RBRACKET .)
    BY              reduce using rule 15 (optional_sorting -> LBRACKET sort_order RBRACKET .)


state 31

    (5) find_query -> FIND agg_func optional_sorting BY IDENTIFIER . FROM IDENTIFIER
    (6) find_query -> FIND agg_func optional_sorting BY IDENTIFIER . FROM join_expression

    FROM            shift and go to state 37


state 32

    (9) agg_func -> AVG LPAREN IDENTIFIER RPAREN .

    LBRACKET        reduce using rule 9 (agg_func -> AVG LPAREN IDENTIFIER RPAREN .)
    BY              reduce using rule 9 (agg_func -> AVG LPAREN IDENTIFIER RPAREN .)


state 33

    (10) agg_func -> COUNT LPAREN IDENTIFIER RPAREN .

    LBRACKET        reduce using rule 10 (agg_func -> COUNT LPAREN IDENTIFIER RPAREN .)
    BY              reduce using rule 10 (agg_func -> COUNT LPAREN IDENTIFIER RPAREN .)


state 34

    (3) select_query -> SELECT fields optional_sorting WHERE conditions FROM . IDENTIFIER
    (4) select_query -> SELECT fields optional_sorting WHERE conditions FROM . join_expression
    (25) join_expression -> . JOIN tables ON join_conditions

    IDENTIFIER      shift and go to state 38
    JOIN            shift and go to state 40

    join_expression                shift and go to state 39

state 35

    (21) condition -> IDENTIFIER EQUALS . STRING
    (22) condition -> IDENTIFIER EQUALS . IDENTIFIER

    STRING          shift and go to state 42
    IDENTIFIER      shift and go to state 41


state 36

    (20) conditions -> condition COMMA . conditions
    (19) conditions -> . condition
    (20) conditions -> . condition COMMA conditions
    (21) condition -> . IDENTIFIER EQUALS STRING
    (22) condition -> . IDENTIFIER EQUALS IDENTIFIER

    IDENTIFIER      shift and go to state 28

    condition                      shift and go to state 29
    conditions                     shift and go to state 43

state 37

    (5) find_query -> FIND agg_func optional_sorting BY IDENTIFIER FROM . IDENTIFIER
    (6) find_query -> FIND agg_func optional_sorting BY IDENTIFIER FROM . join_expression
    (25) join_expression -> . JOIN tables ON join_conditions

    IDENTIFIER      shift and go to state 44
    JOIN            shift and go to state 40

    join_expression                shift and go to state 45

state 38

    (3) select_query -> SELECT fields optional_sorting WHERE conditions FROM IDENTIFIER .

    $end            reduce using rule 3 (select_query -> SELECT fields optional_sorting WHERE conditions FROM IDENTIFIER .)


state 39

    (4) select_query -> SELECT fields optional_sorting WHERE conditions FROM join_expression .

    $end            reduce using rule 4 (select_query -> SELECT fields optional_sorting WHERE conditions FROM join_expression .)


state 40

    (25) join_expression -> JOIN . tables ON join_conditions
    (23) tables -> . IDENTIFIER
    (24) tables -> . IDENTIFIER COMMA tables

    IDENTIFIER      shift and go to state 47

    tables                         shift and go to state 46

state 41

    (22) condition -> IDENTIFIER EQUALS IDENTIFIER .

    COMMA           reduce using rule 22 (condition -> IDENTIFIER EQUALS IDENTIFIER .)
    FROM            reduce using rule 22 (condition -> IDENTIFIER EQUALS IDENTIFIER .)


state 42

    (21) condition -> IDENTIFIER EQUALS STRING .

    COMMA           reduce using rule 21 (condition -> IDENTIFIER EQUALS STRING .)
    FROM            reduce using rule 21 (condition -> IDENTIFIER EQUALS STRING .)


state 43

    (20) conditions -> condition COMMA conditions .

    FROM            reduce using rule 20 (conditions -> condition COMMA conditions .)


state 44

    (5) find_query -> FIND agg_func optional_sorting BY IDENTIFIER FROM IDENTIFIER .

    $end            reduce using rule 5 (find_query -> FIND agg_func optional_sorting BY IDENTIFIER FROM IDENTIFIER .)


state 45

    (6) find_query -> FIND agg_func optional_sorting BY IDENTIFIER FROM join_expression .

    $end            reduce using rule 6 (find_query -> FIND agg_func optional_sorting BY IDENTIFIER FROM join_expression .)


state 46

    (25) join_expression -> JOIN tables . ON join_conditions

    ON              shift and go to state 48


state 47

    (23) tables -> IDENTIFIER .
    (24) tables -> IDENTIFIER . COMMA tables

    ON              reduce using rule 23 (tables -> IDENTIFIER .)
    COMMA           shift and go to state 49


state 48

    (25) join_expression -> JOIN tables ON . join_conditions
    (27) join_conditions -> . join_condition
    (28) join_conditions -> . join_condition COMMA join_conditions
    (26) join_condition -> . IDENTIFIER COLON IDENTIFIER

    IDENTIFIER      shift and go to state 52

    join_conditions                shift and go to state 50
    join_condition                 shift and go to state 51

state 49

    (24) tables -> IDENTIFIER COMMA . tables
    (23) tables -> . IDENTIFIER
    (24) tables -> . IDENTIFIER COMMA tables

    IDENTIFIER      shift and go to state 47

    tables                         shift and go to state 53

state 50

    (25) join_expression -> JOIN tables ON join_conditions .

    $end            reduce using rule 25 (join_expression -> JOIN tables ON join_conditions .)


state 51

    (27) join_conditions -> join_condition .
    (28) join_conditions -> join_condition . COMMA join_conditions

    $end            reduce using rule 27 (join_conditions -> join_condition .)
    COMMA           shift and go to state 54


state 52

    (26) join_condition -> IDENTIFIER . COLON IDENTIFIER

    COLON           shift and go to state 55


state 53

    (24) tables -> IDENTIFIER COMMA tables .

    ON              reduce using rule 24 (tables -> IDENTIFIER COMMA tables .)


state 54

    (28) join_conditions -> join_condition COMMA . join_conditions
    (27) join_conditions -> . join_condition
    (28) join_conditions -> . join_condition COMMA join_conditions
    (26) join_condition -> . IDENTIFIER COLON IDENTIFIER

    IDENTIFIER      shift and go to state 52

    join_condition                 shift and go to state 51
    join_conditions                shift and go to state 56

state 55

    (26) join_condition -> IDENTIFIER COLON . IDENTIFIER

    IDENTIFIER      shift and go to state 57


state 56

    (28) join_conditions -> join_condition COMMA join_conditions .

    $end            reduce using rule 28 (join_conditions -> join_condition COMMA join_conditions .)


state 57

    (26) join_condition -> IDENTIFIER COLON IDENTIFIER .

    COMMA           reduce using rule 26 (join_condition -> IDENTIFIER COLON IDENTIFIER .)
    $end            reduce using rule 26 (join_condition -> IDENTIFIER COLON IDENTIFIER .)

